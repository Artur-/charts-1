---
title: Usage with React
order: 10
layout: page
---

[[charts.react.introduction]]
= Usage with React

Vaadin Charts can be used in React applications. In the following, we assume that you
already have a React application setup ready. If you need help with the
project setup, you should follow the
https://facebook.github.io/react/docs/getting-started.html[React's Getting Started] guide.

[[charts.react.installation]]
== Installation

While React dependencies are typically installed via https://www.npmjs.com/[npm], Vaadin Charts requires installation with http://bower.io/[Bower]:

[subs="normal"]
----
[prompt]#$# [command]#bower# install --save [parameter]#vaadin-charts#
----

After the Bower installation is completed, you need to add the Web Components polyfill to the [elementname]#head# section of your [filename]#index.html# file.

[source, html]
----
<script src="bower_components/webcomponentsjs/webcomponents-lite.min.js"></script>
----

The Web Components polyfill enables using HTML imports in your application.
You need to add an import in your [filename]#index.html# for each chart type that you want
to use.
See <<charts-charttypes#charts.chattypes, "Chart Types">> for a complete list of available types.

[source, html]
----
<link rel="import" href="bower_components/vaadin-charts/vaadin-line-chart.html">
----

[[charts.react.usage]]
== Usage

To use Vaadin Charts in a React class, you need to import the Vaadin Charts component:

[source, html]
----
require('./bower_components/vaadin-charts/react');
----

Once you have done this, you can use the Charts API to create a Vaadin chart:

[source, javascript]
----
// Create a React class
var MyChart = React.createClass({

  // Use the render function to create a Vaadin Chart
  render: function() {
    return (
      <div>
        <vaadin-line-chart>
          <chart-title>Fibonacci</chart-title>
          <x-axis><title>Index</title></x-axis>
          <y-axis><title>Value</title></y-axis>
          <data-series>
            {/* Define data to be displayed in the chart inline */}
            <data>0, 1, 1, 2, 3, 5, 8, 13</data>
          </data-series>
        </vaadin-line-chart>
      </div>
    )
  }
});
----

[[charts.react.databinding]]
== Data Binding

Earlier we displayed data defined inline in a data series.
You can also generate the data series on demand, such as from a dynamic data source.
Data binding is not supported when setting data as an attribute.

[source, javascript]
----
// Create a React class
var MyChart = React.createClass({

  // Set array of data to the data variable
  getInitialState: function() {

    // Generate the data series programmatically
    var data=[0, 1];
    for (var i=0; i < 6; i++) {
        data.push(data[data.length-1] + data[data.length-2]);
    }
    return {
      data: data
    };
  },

  // Use the render function to create a Vaadin Chart
  render: function() {
    return (
      <div>
        <vaadin-line-chart>
          <chart-title>Fibonacci</chart-title>
          <x-axis><title>Index</title></x-axis>
          <y-axis><title>Value</title></y-axis>
          <data-series>
            {/* data array has to be a string */}
            <data>{this.state.data.map(JSON.stringify).join(',')}</data>
          </data-series>
        </vaadin-line-chart>
      </div>
    )
  }
});
----

[[charts.react.events]]
== Events

User interaction with a chart causes firing events, which you can handle in a React class.
The events are described in the http://demo.vaadin.com/vaadin-charts-api/[Vaadin Charts Elements API]

[source, javascript]
----
// Create a React class
var MyChart = React.createClass({

  // Create a function for handling the event
  chartLoaded: function() {
    console.log('Chart was loaded');
  },

  // Use the render function to create a Vaadin Chart
  render: function() {
    return (
      <div>
        {/* Set Charts to handle an event with the handler function */}
        <vaadin-line-chart on-chart-loaded={this.chartLoaded}>
          <chart-title>Fibonacci</chart-title>
          <x-axis><title>Index</title></x-axis>
          <y-axis><title>Value</title></y-axis>
          <data-series>
            <data>0, 1, 1, 2, 3, 5, 8, 13</data>
          </data-series>
        </vaadin-line-chart>
      </div>
    )
  }
});
----
