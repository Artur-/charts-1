---
title: Migration Guide
order: 9
layout: page
---

[[charts.migration]]
= Charts 2 to Charts 3 Migration Guide

[[charts.migration.introduction]]
== Introduction

Most of Vaadin Charts 3 API is compatible with Vaadin Charts 2.x. It can thus be used as a drop-in replacement for any 2.x version with some minor fixes.
The objective of this document is to make the transition from Vaadin Charts 2.x to Vaadin Charts 3.x easier.

[[charts.migration.timeline]]
== Timeline
One of the big features of Vaadin Charts 3 for Java is dropping the old [classname]#Timeline# component and introducing the new timeline mode that can be used in regular charts with time-typed X axis.
You can find out more about this feature in <<charts-timeline#charts.timeline,"Timeline section">>.

[[charts.migration.classnamedif]]
== Changes in class names

[[charts.migration.classnamedif.plotoptions]]
=== PlotOptions

Apart from the new plot options for the new chart types ([classname]#PlotOptionsCandlestick#, [classname]#PlotOptionsFlags# and [classname]#PlotOptionsOhlc#), there has been the following changes in the names of the existing plot options:

* [classname]#PlotOptionsAreaRange# -> [classname]#PlotOptionsArearange#
* [classname]#PlotOptionsAreaSpline# -> [classname]#PlotOptionsAreaspline#
* [classname]#PlotOptionsAreaSplineRange# -> [classname]#PlotOptionsAreasplinerange#
* [classname]#PlotOptionsColumnRange# -> [classname]#PlotOptionsColumnrange#
* [classname]#PlotOptionsHeatMap# -> [classname]#PlotOptionsHeatmap#
* [classname]#PlotOptionsSolidGauge# -> [classname]#PlotOptionsSolidgauge#
* [classname]#PlotOptionsTreeMap# -> [classname]#PlotOptionsTreemap#

[[charts.migration.classnamedif.labels]]
=== Labels

The [classname]#Labels# class was used in:

* [classname]#PlotOptions# as data labels
* [classname]#XAxis# and [classname]#YAxis# as labels
* [classname]#DataSeriesItem# as data labels
* [classname]#TreeMapLevel# as data labels

Given that not all [classname]#Labels# properties were useful in all the places where it was used, the class was split and the following classes have been created:

* [classname]#DataLabelsFunnel# used in [classname]#PlotOptionsFunnel# and [classname]#PlotOptionsPyramid#
* [classname]#DataLabelsRange# used in [classname]#PlotOptionsArearange#, [classname]#PlotOptionsAreasplinerange# and [classname]#PlotOptionsColumnrange#
* [classname]#DataLabels# used in the rest of Plot Options implementations
* [classname]#Labels# used in [classname]#XAxis# and [classname]#YAxis#
* [classname]#Label# used in [classname]#Crosshair#, [classname]#PlotBand# and [classname]#Plotline#

[[charts.migration.classnamedif.other]]
=== Other

* [classname]#MarkerStates# -> [classname]#States#
* [classname]#State# -> [classname]#Hover# and [classname]#Select#
* [classname]#CrosshairStyle# -> [classname]#Crosshair#
* [classname]#TreeMapLevel# -> [classname]#Level#
* [classname]#CreditPosition# -> [classname]#Position#
* [classname]#FramePanel# -> [classname]#Back#, [classname]#Bottom#, and [classname]#Side#

[[charts.migration.methodnamedif]]
== Changes in method names

[[charts.migration.methodnamedif.align]]
=== Align properties

The [propertyname]#align# property accepts values defined in the [classname]#HorizontalAlign# enum in all cases with the exception of [classname]#AxisTitle#.
In the [classname]#AxisTitle# class, the [propertyname]#align# property accepts values defined in the [classname]#VerticalAlign# enum.

[[charts.migration.methodnamedif.size]]
=== Size related properties

In order to follow Vaadin Framework standards, properties related to size ([propertyname]#size#, [propertyname]#innerRadius#, [propertyname]#outerRadius#, [propertyname]#thickness#, [propertyname]#whiskerLength#, and so forth) now have two different setters.
One of the setters has a single [classname]#String# parameter.
The other setter has a float and a [classname]#Unit# enum parameter.

As shown in the following example a percentage width can be defined using both setters

[source, java]
----
PlotOptionsPyramid options = new PlotOptionsPyramid();

// Old setter
// options.setWidthAsPercentage(70);

// Using float and Unit
options.setWidth(70, Unit.PERCENTAGE);

// Using String setter
options.setWidth("70%");
----


[[charts.migration.methodnamedif.crosshair]]
=== Crosshair
The crosshair definitions have been moved to the axis object for a better separation from the tooltip.
The [methodname]#setCrosshairs(CrosshairStyle)# method in [classname]#Tooltip# class is now [methodname]#setCrosshair#(Crosshair) method in [classname]#XAxis# and [classname]#YAxis# classes.

[[charts.migration.methodnamedif.other]]
=== Other
* [classname]#XAxis# [methodname]#setShowLastTickLabel()# is now [classname]#XAxis# [methodname]#setShowLastLabel()#
* [classname]#YAxis# [methodname]#setMinorTickInterval()# is now [classname]#YAxis# [methodname]#setMinTickInterval()#
* [classname]#PlotOptionsLine# [methodname]#setStepType()# is now [classname]#PlotOptionsLine# [methodname]#setStep()#
* [classname]#Pane# [methodname]#setCenterXY()# is now [classname]#Pane# [methodname]#setCenter()#

[[charts.migration.example]]
== Example

[[charts.migration.example.charts2]]
=== Original Charts 2 configuration

[source, java]
----
private Chart getChart() {
    Chart chart = new Chart();

    Configuration config = chart.getConfiguration();
    config.setTitle("Charts migration");
    config.getTitle().setHorizontalAlign(HorizontalAlign.LEFT);

    config.getTooltip().setCrosshairs(
    new CrosshairStyle(10, SolidColor.BLACK, DashStyle.SOLID, 0),
    new CrosshairStyle(5, "#880000", DashStyle.DOT, 1));

    config.getLegend().setEnabled(false);
    config.getTooltip().setEnabled(false);

    ListSeries ls = new ListSeries();
    ls.setName("Data");
    ls.setData(29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4,
            194.1, 95.6, 54.4);
    ls.setPlotOptions(new PlotOptionsAreaSpline());
    ls.getPlotOptions().setColor(SolidColor.BURLYWOOD);
    ls.getPlotOptions().setDataLabels(new Labels(false));
    config.setSeries(ls);
    return chart;
}
----

[[charts.migration.example.changes]]
=== Changes needed
Horizontal alignment of the title should now be set using the [methodname]#setAlign()# method.

[classname]#CrosshairStyle# is now [classname]#Crosshair# and one instance should be set in both [classname]#XAxis# and [classname]#YAxis#.

[classname]#PlotOptionsAreaSpline# is now [classname]#PlotOptionsAreaspline#.

[classname]#DataLabels# should be used in the [methodname]#setDataLabels()# method instead of the [classname]#Labels# class.

[[charts.migration.example.result]]
=== Resulting Charts 3 Configuration

[source, java]
----
private Chart getChart() {
    Chart chart = new Chart();

    Configuration config = chart.getConfiguration();
    config.setTitle("Charts migration");
    config.getTitle().setAlign(HorizontalAlign.LEFT);

    Crosshair xCrossHair = new Crosshair();
    xCrossHair.setColor(SolidColor.BLACK);
    xCrossHair.setDashStyle(DashStyle.SOLID);
    xCrossHair.setWidth(10);
    xCrossHair.setZIndex(0);
    config.getxAxis().setCrosshair(xCrossHair);

    Crosshair yCrossHair = new Crosshair();
    yCrossHair.setColor(new SolidColor("#880000"));
    yCrossHair.setDashStyle(DashStyle.DOT);
    yCrossHair.setWidth(5);
    yCrossHair.setZIndex(1);
    config.getyAxis().setCrosshair(yCrossHair);

    config.getLegend().setEnabled(false);
    config.getTooltip().setEnabled(false);

    ListSeries ls = new ListSeries();
    ls.setName("Data");
    ls.setData(29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4,
            194.1, 95.6, 54.4);
    PlotOptionsAreaspline plotOptions = new PlotOptionsAreaspline();
    plotOptions.setColor(SolidColor.BURLYWOOD);
    plotOptions.setDataLabels(new DataLabels(false));
    ls.setPlotOptions(plotOptions);
    config.setSeries(ls);

    return chart;
}
----
