---
title: Timeline
order: 8
layout: page
---

[[charts.timeline]]
= Timeline

The [classname]#Timeline# is a charting component in the Vaadin Charts add-on
separate from the [classname]#Chart# component. Its purpose is to give the user
an intuitive understanding of events and trends on a horizontal timeline axis.

[classname]#Timeline# uses its own representation for the data series, different
from the [classname]#Chart# and more optimized for updating. You can represent
almost any time-related statistical data that has a time-value mapping. Multiple
data sources can be used to allow comparison between data.

[[figure.charts.timeline]]
.Timeline Component
image::img/timeline-overview.png[]

A timeline allows representing time-related data visually as graphs instead of
numerical values. They are used commonly in almost all fields of business,
science, and technology, such as in project management to map out milestones and
goals, in geology to map out historical events, and perhaps most prominently in
the stock market.

With Timeline, you can represent almost any time-related statistical data that
has a time-value mapping. Even several data sources can be used for comparison
between data. This allows the user to better grasp of changes in the data and
antipate forthcoming trends and problems.

[[charts.timeline.graphtypes]]
== Graph types

The Vaadin Timeline supports three graph types:

__Line graphs__:: Useful for representing continuous data, such as temperature changes or changes in stock price.
__Bar graphs__:: Useful for representing discrete or discontinuous data, such as market share or forum posts.
__Scatter graphs__:: Useful for representing discrete or discontinuous data.


If you have several graphs in the timeline, you can also stack them on top of
each other instead of drawing them on top of each other by setting
[methodname]#setGraphStacking()# in [classname]#Timeline# to
[literal]#++true++#.


[[charts.timeline.interaction]]
== Interaction Elements

The user can interact with the Vaadin Timeline in several ways.

On the bottom of the timeline there is a __scrollbar area__ where you can move
the time forward or backward in time by dragging the time range box or by
clicking the left and right arrow buttons. You can change the time range by
resizing the range box in the scrollbar area. You can also zoom with the mouse
wheel when the pointer is inside the component.

[[figure.charts.timeline.interaction.scrollbar]]
.Scrollbar Area
image::img/timeline-interaction-scrollarea.png[]

The middle area of the timeline is the __main area__ where the selected time
range is displayed. Time scale is shown below the main area. The time scale used
depends on the zoom level and can be a time unit from hours to years. Value
scale is displayed on the right side of the main area. The scale can be either a
static value range or a range calculated from the displayed data set. The user
can move in time by dragging the main area with the mouse left and right and
zoom in and out by using the mouse wheel.

[[figure.charts.timeline.interaction.mainarea]]
.Main Area
image::img/timeline-interaction-mainarea.png[]

You can select a __preset zoom level__ with the buttons on the top the Timeline.
This will change the displayed time range to match the zoom level. The zoom
levels are fully customizable to suit the time range in the API.

[[figure.charts.timeline.interaction.presetzooms]]
.Preset Zoom Buttons
image::img/timeline-interaction-presetzooms.png[]

The __current time range__ is shown at the top-right corner of the component.
Clicking the dates makes them editable, so that you can manually change them.
__Graph legend__ is shown below the time range. The legend explains what is
represented by each bar on the graph and displays the current value when the
user moves the mouse cursor over the graph.

[[figure.charts.timeline.interaction.timerange]]
.Current Time Range and Graph Legend
image::img/timeline-interaction-timerange.png[]

Finally, the available __chart modes__ are shown below the preset zoom levels
options. The available graph modes can be set from the API.

[[figure.charts.timeline.interaction.chartmode]]
.Chart Mode
image::img/timeline-interaction-chartmode.png[]

You can use or hide any of the features above can be shown or hidden depending
on your needs. For example, if you only need to display a graph without any
controls, you can hide all them from the API.


[[charts.timeline.eventmarkers]]
== Event Markers

In addition to graphs, the timeline can have events. An event can be, for
example, the time of a published advertisement in a graph that displays website
hits. Combining the event data with the graphs enables the user to observe the
relevance of the advertisement to the website hits visually.

Vaadin Timeline provides two types of event markers, as illustrated in
<<figure.charts.timeline.eventmarkers>>.

[[figure.charts.timeline.eventmarkers]]
.Timeline Event Markers
image::img/timeline-event-markers.png[]

(On left) Marker with a customizable marker sign, for example, letter 'E'. The
marker displays a caption which appears when the user hovers the pointer over
the event.

(On right) Marker with button-like appearance with a marker sign and a caption.


ifdef::web[]
[[charts.timeline.efficiency]]
== Efficiency

Vaadin Timeline reduces the traffic between the server and the client by using
two methods. First, all the data that is presented in the component is
dynamically fetched from the server as needed. This means that when the user
scrolls the timeline view, the component continuously fetches data from the
server. Also, only data that is visible to the user is transferred to the
client. For example, if the timeline has data that has been measured once a
second for an entire year, not all the data will be sent to the client. Only the
data which can be rendered on the screen without overlapping is sent. This
ensures that, even for large data sets, the loading time is small and only the
necessary data is actually transferred over the network.

Second, Vaadin Timeline caches the data received from the server in the browser,
so that the data is transferred over the network only once, if possible. This
speeds up the time-range browsing when data can be fetched from the cache
instead of reloading it over the network.

endif::web[]

[[charts.timeline.data-source]]
== Data Source Requirements

Vaadin Timeline uses Vaadin containers as data sources for both the graphs and
the events. There are, however, some requirements for the containers to make
them compatible with the Vaadin Timeline.

The containers have to implement [interfacename]#Container.Indexed# for the
Vaadin Timeline to be able to use them. This is because the Vaadin Timeline
dynamically fetches the data from the server when needed. This way large data
sets can be used without having to load all data to the client-side at once and
it brings a huge performance increase.

Another requirement is that the container has one property of type
[classname]#java.util.Date# (or a class that can be cast to it), which contains
the timestamp when a data point or event occurred. This property has to be set
by using the [methodname]#setGraphTimestampPropertyId()# in
[classname]#Timeline#. The default property ID timeline.PropertyId.TIMESTAMP is
used if no timestamp-property ID has been set.

A graph container also needs to have a __value__ property that defines the value
of the data point. This value can be any numerical value. The value property can
be set with [methodname]#setGraphValuePropertyId()# in [classname]#Timeline#.
The default property ID Timeline.PropertyId.VALUE is used if no value property
is given.

Below is an example of how a graph container could be constructed:

[source, java]
----
// Construct a container which implements Container.Indexed
IndexedContainer container = new IndexedContainer();

// Add the Timestamp property to the container
Object timestampProperty = "Our timestamp property";
container.addContainerProperty(timestampProperty,
                               java.util.Date.class, null);

// Add the value property
Object valueProperty = "Our value property";
container.addContainerProperty(valueProperty, Float.class, null);

// Our timeline
Timeline timeline = new Timeline();

// Add the container as a graph container
timeline.addGraphDataSource(container, timestampProperty,
                                       valueProperty);
----

The event and marker containers are similar. They both need the
[parameter]#timestamp# property which should be of type
[classname]#java.util.Date# and the [parameter]#caption# property which should
be a string. The marker container additionally needs a [parameter]#value#
property which is displayed in the marker popup.

Below is an example on how a marker or event container can be constructed:

[source, java]
----
// Create the container
IndexedContainer container = new IndexedContainer();

// Add the timestamp property
container.addContainerProperty(Timeline.PropertyId.TIMESTAMP,
                               Date.class, null);

// Add the caption property
container.addContainerProperty(Timeline.PropertyId.CAPTION,
                              String.class, "");

// Add the marker specific value property.
// Not needed for a event containers.
container.addContainerProperty(Timeline.PropertyId.VALUE,
                               String.class, "");

// Create the timeline with the container as both the marker
// and event data source
Timeline timeline = new Timeline();
timeline.setMarkerDataSource(container,
	Timeline.PropertyId.TIMESTAMP,
	Timeline.PropertyId.CAPTION,
	Timeline.PropertyId.VALUE);

timeline.setEventDataSource(container,
	Timeline.PropertyId.TIMESTAMP,
	Timeline.PropertyId.CAPTION);
----

The above example uses the default property IDs. You can change them to suit
your needs.

The [classname]#Timeline# listens for changes in the containers and updates the
graph accordingly. When it updates the graph and items are added or removed from
the container, the currently selected date range will remain selected. The
selection bar in the browser area moves to keep the current selection selected.
If you want the selection to change when the contents of the container changes
and keep the selection area stationary, you can disable the selection lock by
setting [methodname]#setBrowserSelectionLock()# to [parameter]#false#.


[[charts.timeline.events]]
== Events and Listeners

Two types of events are available when using the Vaadin Timeline.

[[charts.timeline.events.daterange]]
=== Date Range Changes

When the user modifies the selected date range by moving the date range
selector, dragging the timeline, or by manually entering new dates, an event
will be sent to the server with the information of what the current displayed
date range is. To listen to these events you can attach a
[classname]#DateRangeListener# which will receive the start and end dates of the
current selection.


[[charts.timeline.events.eventclick]]
=== Event Clicks

If the timeline has events, you can add an [classname]#EventClickListener# to
listen for clicks on the events. The listener will receive a list of item IDs
which are related to the click event from the event data source. Multiple events
can be combined into a single event icon if space is not sufficient for
displaying them all, in which case many item IDs can be returned.



[[charts.timeline.configurability]]
== Configurability

The Vaadin Timeline is highly customizable and its outlook can be easily changed
to suit your needs. The default view of the Timeline contains all the controls
available but often all of them are not needed and can be hidden.

The following list contains the components that can be shown or hidden at your
preference:

* Chart modes
* Textual date select
* Browser area (bottom part of the Timeline)
* Legend
* Zoom levels
* Caption

The outlook of the graphs themselves can also be changed for both the browser
area and the main view. The following settings are available through the API:

* Graph outline color
* Graph outline width
* Graph caps (in line graphs only)
* Graph fill color
* Graph visibility
* Graph shadows

Other changes to the outlook of the component can easily be done by CSS.

Zoom levels are also fully customizable. Zoom levels are defined as milliseconds
and can be added by calling the [methodname]#addZoomLevel()# method. A zoom
level always has a caption, which is the visible part in the zoom panel, and a
millisecond amount.

By default the grid divides the graph into five equally spaced parts with a gray
color. However, you can fully customize how the grid is drawn by using
[methodname]#setGridColor()# and [methodname]#setVerticalGridLines()#.


[[charts.timeline.localization]]
== Localization

By default the Vaadin Timeline uses English as its primary language for the
captions and the default locale for the application to display the dates in the
timeline.

You can change the different captions in the Timeline by using their
corresponding setters:

* [methodname]#setZoomLevelsCaption()# -- The caption appearing before the zoom levels
* [methodname]#setChartModesCaption()# -- The caption appearing before the chart modes

Furthermore, you can also change the locale in which the Timeline shows the
dates in the horizontal scale by specifying a valid locale using the
[methodname]#setLocale()# method of the timeline.

You can also configure in what format the dates appear in the horizontal scale
or in the date select in the top-right corner by using the
[methodname]##getDateFormats()##-method which will return a
[classname]#DateFormatInfo# object. By using its setters you can set specific
formats for each date range in the scale. Please note that if you are using long
date formats they might get clipped if the scale does not fit the whole
formatted date.


ifdef::web[]
[[charts.timeline.code-example]]
== Timeline Tutorial

In the following tutorial, we look step-by-step how to create a timeline.

[[charts.timeline.code-example.data-sources]]
=== Create the Data Sources

To use the Timeline, you need to create some data sources for it. Timeline uses
[interfacename]#Container.Indexed# containers as data sources for both the
graphs and the markers and events. So lets start by creating a datasource which
represents the graph we want to draw in the timeline.

For the Timeline to understand how the data is constructed in the container we
need to use specific property ids which describe what kind of data each property
represents. For the Vaadin Timeline to work properly we will need to add two
property ids, one for when the value was acquired and one for the value itself.
The Vaadin Timeline has these both properties predefined as
[parameter]#Timeline.PropertyId.TIMESTAMP# and
[parameter]#Timeline.PropertyId.VALUE#. You can use the predefined ones or
create your own if you wish.

So, lets create a container which meets the above stated specification. Open the
main UI class which was automatically created when we created the project and
add the following method.

[source, java]
----
/**
 * Creates a graph container with a month of random data
 */
public Container.Indexed createGraphDataSource(){

    // Create the container
    Container.Indexed container = new IndexedContainer();

    // Add the required property ids (use the default ones here)
    container.addContainerProperty(Timeline.PropertyId.TIMESTAMP,
        Date.class, null);
    container.addContainerProperty(Timeline.PropertyId.VALUE,
        Float.class, 0f);

    // Add some random data to the container
    Calendar cal = Calendar.getInstance();
    cal.add(Calendar.MONTH, -1);
    Date today = new Date();
    Random generator = new Random();

    while(cal.getTime().before(today)){
        // Create  a point in time
        Item item = container.addItem(cal.getTime());

        // Set the timestamp property
        item.getItemProperty(Timeline.PropertyId.TIMESTAMP)
            .setValue(cal.getTime());

        // Set the value property
        item.getItemProperty(Timeline.PropertyId.VALUE)
            .setValue(generator.nextFloat());

        cal.add(Calendar.DAY_OF_MONTH, 1);
    }

    return container;
}
----

This method will create an indexed container with some random points. As you can
see we are using an [classname]#IndexedContainer# and define two properties to
it which was discussed earlier. Then we just generate some random data in the
container. Here we are using the default property ids for the timestamp and
value but you could use your own if you wished. We'll see later how you would
tell the Timeline which property ids to use if you used your own.

Next, lets add some markers to our graph. Markers are arrow like shapes in the
bottom of the timeline with which you can mark some occurrence that happened at
that time. To create markers you again have to create a data source for them.
I'll first show you how the code to create them and then explain what it all
means. Add the following method to the UI class:

[source, java]
----
/**
 * Creates a marker container with a marker for each seven days
 */
public Container.Indexed createMarkerDataSource(){

    // Create the container
    Container.Indexed container = new IndexedContainer();

    // Add the required property IDs (use the default ones here)
    container.addContainerProperty(Timeline.PropertyId.TIMESTAMP,
            Date.class, null);
    container.addContainerProperty(Timeline.PropertyId.CAPTION,
            String.class, "Our marker symbol");
    container.addContainerProperty(Timeline.PropertyId.VALUE,
            String.class, "Our description");

    // Add a marker for every seven days
    Calendar cal = Calendar.getInstance();
    cal.add(Calendar.MONTH, -1);
    Date today = new Date();
    SimpleDateFormat formatter =
            new SimpleDateFormat("EEE, MMM d, ''yy");
    while(cal.getTime().before(today)){
        // Create a point in time
        Item item = container.addItem(cal.getTime());

        // Set the timestamp property
        item.getItemProperty(Timeline.PropertyId.TIMESTAMP)
                .setValue(cal.getTime());

        // Set the caption property
        item.getItemProperty(Timeline.PropertyId.CAPTION)
                .setValue("M");

        // Set the value property
        item.getItemProperty(Timeline.PropertyId.VALUE).
           setValue("Today is "+formatter.format(cal.getTime()));

        cal.add(Calendar.DAY_OF_MONTH, 7);
    }

    return container;
}
----

Here we start the same as in the example with the graph container by creating an
indexed container. Remember, all containers must be indexed containers when
using the graph component.

We then add the timestamp property, caption property and value property.

The timestamp property is the same as in the graph container but the caption and
value property differ. The caption property describes what kind of marker it is.
The caption is displayed on top of the arrow shape in the Timeline so it should
be a short symbol, preferably only one character long. The class of the caption
property must be String.

The value property should also be a string and is displayed when the user hovers
the mouse over the marker. This string can be arbitrarily long and normally
should represent some kind of description of the marker.

The third kind of data sources are the event data sources. The events are
displayed on top of the timeline and supports grouping and are clickable. They
are represented as button like icons in the Timeline.

The event data sources are almost identical the to marker data sources except
the value property is missing. Lets create an event data source and add events
for each Sunday in out graph:

[source, java]
----
/**
 * Creates a event container with a marker for each sunday
 */
public Container.Indexed createEventDataSource(){

    // Create the container
    Container.Indexed container = new IndexedContainer();

    // Add the required property IDs (use default ones here)
    container.addContainerProperty(
            Timeline.PropertyId.TIMESTAMP, Date.class, null);
    container.addContainerProperty(
            Timeline.PropertyId.CAPTION,
            String.class, "Our marker symbol");

    // Add a marker for every seven days
    Calendar cal = Calendar.getInstance();
    cal.add(Calendar.MONTH, -1);
    Date today = new Date();
    while(cal.getTime().before(today)){
        if (cal.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY){
            // Create a point in time
            Item item = container.addItem(cal.getTime());

            // Set the timestamp property
            item.getItemProperty(Timeline.PropertyId.TIMESTAMP)
                .setValue(cal.getTime());

            // Set the caption property
            item.getItemProperty(Timeline.PropertyId.CAPTION)
                .setValue("Sunday");
        }
        cal.add(Calendar.DAY_OF_MONTH, 1);
    }

    return container;
}
----

As you can see the event container does not differ a whole lot from the marker
containers. In use however they differ since they are groupable they can be
closely put together and still be usable and you can add click listeners to them
so you can catch user events. More on the click listeners later.

So now we have our three data sources ready to be displayed in our application.
In the next chapter we will use them with our Timeline and see how they
integrate with it.


[[charts.timeline.code-example.timeline]]
=== Create the Timeline

Okay, now that we have out data sources lets look at the init-method in our
Vaadin Application. Lets start by creating our timeline, so add the following
line to the end of the init-method in [classname]#MytimelinedemoApplication#:

[source, java]
----
Timeline timeline = new Timeline("Our timeline");
timeline.setWidth("100%");
----

This will create the timeline we want with a 100 percent width. Now lets add our
data sources to the timeline:

[source, java]
----
timeline.addGraphDataSource(createGraphDataSource(),
                        Timeline.PropertyId.TIMESTAMP,
                        Timeline.PropertyId.VALUE);

timeline.setMarkerDataSource(createMarkerDataSource(),
                        Timeline.PropertyId.TIMESTAMP,
                        Timeline.PropertyId.CAPTION,
                        Timeline.PropertyId.VALUE);

timeline.setEventDataSource(createEventDataSource(),
                        Timeline.PropertyId.TIMESTAMP,
                        Timeline.PropertyId.CAPTION);
----

And finally add the timeline to the UI. Here is the complete init-method:

[source, java]
----
@Override
protected void init(VaadinRequest request) {
    VerticalLayout content = new VerticalLayout();
    setContent(content);

    // Create the timeline
    Timeline timeline = new Timeline("Our timeline");

    // Create the data sources
    Container.Indexed graphDS  = createGraphDataSource();
    Container.Indexed markerDS = createMarkerDataSource();
    Container.Indexed eventDS  = createEventDataSource();

    // Add our data sources
    timeline.addGraphDataSource(graphDS,
                                Timeline.PropertyId.TIMESTAMP,
                                Timeline.PropertyId.VALUE);
    timeline.setMarkerDataSource(markerDS,
                                 Timeline.PropertyId.TIMESTAMP,
                                 Timeline.PropertyId.CAPTION,
                                 Timeline.PropertyId.VALUE);
    timeline.setEventDataSource(eventDS,
                                Timeline.PropertyId.TIMESTAMP,
                                Timeline.PropertyId.CAPTION);

    content.addComponent(timeline);
}
----

Now you should be able to start the application and browse the timeline. The
result is shown in <<figure.charts.timeline.code-example.timeline>>.

[[figure.charts.timeline.code-example.timeline]]
.Timeline Example Application
image::img/timeline-example-timeline.png[]


[[charts.timeline.code-example.final]]
=== Final Touches

Now that we have our timeline we would probably like to customize it a bit.
There are many things you can do but lets start by giving our graph some style
properties and a caption in the legend. This can be done as follows:

[source, java]
----
// Set the caption of the graph
timeline.setGraphLegend(graphDataSource, "Our cool graph");

// Set the color of the graph
timeline.setGraphOutlineColor(graphDataSource, Color.RED);

// Set the fill color of the graph
timeline.setGraphFillColor(graphDataSource, new Color(255,0,0,128));

// Set the width of the graph
timeline.setGraphOutlineThickness(2.0);
----

Lets do the same to the browser areas graph:

[source, java]
----
// Set the color of the browser graph
timeline.setBrowserOutlineColor(graphDataSource, Color.BLACK);

// Set the fill color of the graph
timeline.setBrowserFillColor(graphDataSource,
                             new Color(0,0,0,128));
----

And the result looks like this:

[[figure.code-example.final.styling]]
.Styling Timeline
image::img/timeline-example-result.png[]

Okay, now that looks different. But there is still something missing. If you
look in the upper left corner you will not see any zoom levels. No zoom levels
are predefined so we will have to make our own. Since we are dealing with a
month of data lets make a zoom level for a day, a week and a month. Zoom levels
are given in milliseconds so we will have to calculate how many milliseconds
each of the zoom levels are. So lets add them by adding the following lines:

[source, java]
----
// Add some zoom levels
timeline.addZoomLevel("Day", 86400000L);
timeline.addZoomLevel("Week", 7 * 86400000L);
timeline.addZoomLevel("Month", 2629743830L);
----

Remember the events we added? You can now see them in the graph but their
functionality is still a bit incomplete. We can add an event listener to the
graph which will send an event each time the user clicks on one of the event
buttons. To demonstrate this feature lets add an event listener which notifies
the user what date the Sunday-button represents. Here is the code for that:

[source, java]
----
// Listen to click events from events
timeline.addListener(new Timeline.EventClickListener() {
    @Override
    public void eventClick(EventButtonClickEvent event) {
        Item item = eventDataSource.getItem(event.getItemIds()
                                   .iterator().next());
        Date sunday = (Date) item.getItemProperty(
                      Timeline.PropertyId.TIMESTAMP).getValue();
        SimpleDateFormat formatter =
            new SimpleDateFormat("EEE, MMM d, ''yy");

        Notification.show(formatter.format(sunday));
    }
});
----

Now try clicking on the events and see what happens!

And here is the final demo application, yours will probably look a bit different
since we are using random data.

[[figure.code-example.final.final]]
.Final Example
image::img/timeline-example-final.png[]

Now we hope you have a basic understanding of how the Timeline works and how it
can be customized. There are still a few features we left out of this tutorial
like hiding unnecessary components from the timeline and adding multiple graphs
to the timeline, but these are pretty self explanatory features and you probably
can look them up in the JavaDoc.


endif::web[]
