<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.vaadin.addon</groupId>
	<version>2.1-SNAPSHOT</version>
	<artifactId>vaadin-charts</artifactId>
	<packaging>jar</packaging>
	<name>Vaadin Charts</name>
	<inceptionYear>2012</inceptionYear>

	<profiles>
		<profile>
			<id>verify-only-phantom</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
							<configuration>
								<systemPropertyVariables>
									<browsers.include>phantomjs1</browsers.include>
								</systemPropertyVariables>
							</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>verify-local-phantom</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<systemPropertyVariables>
								<localPhantom>true</localPhantom>
							</systemPropertyVariables>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>start-jetty-for-it</id>
			<activation>
				<property>
					<name>skipTests</name>
					<value>!true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.mortbay.jetty</groupId>
						<artifactId>jetty-maven-plugin</artifactId>
						<executions>
							<!-- start and stop jetty (running our app) when running integration
                                 tests -->
							<execution>
								<id>start-jetty</id>
								<phase>pre-integration-test</phase>

								<goals>
									<goal>start</goal>
								</goals>
								<configuration>
									<daemon>true</daemon>
									<scanIntervalSeconds>0</scanIntervalSeconds>
								</configuration>
							</execution>
							<execution>
								<id>stop-jetty</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<organization>
		<name>Vaadin Ltd</name>
		<url>http://vaadin.com/</url>
	</organization>
	<url>http://vaadin.com/</url>
	<scm>
		<connection>scm:git:https://github.com/vaadin/charts.git</connection>
		<developerConnection>scm:git:https://github.com/vaadin/charts.git</developerConnection>
	</scm>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<project.organization>Vaadin Ltd</project.organization>
		<vaadin.version.maven>7.4.4</vaadin.version.maven>
		<snapshot.repository.url>http://oss.sonatype.org/content/repositories/vaadin-snapshots/</snapshot.repository.url>
	</properties>

	<licenses>
		<license>
			<name>cval3</name>
			<url>https://vaadin.com/license/cval-3</url>
		</license>
	</licenses>

	<build>
		<resources>
			<!-- These are also needed for the sources required by the GWT compiler
				to be included in the produced JARs -->
			<resource>
				<directory>src/main/java</directory>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
			</resource>

		</resources>

		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<version>1.8</version>
				<configuration>
					<licenseName>cval3</licenseName>
					<licenseResolver>file://${basedir}/src/license</licenseResolver>
					<includes>
						<include>**/main/**/*.java</include>
					</includes>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.7</version>
				<configuration>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.3</version>
				<configuration>
					<encoding>UTF-8</encoding>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.3.1</version>
				<configuration>
					<archive>
						<manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
						<index>true</index>
						<manifest>
							<addClasspath>true</addClasspath>
							<!-- Implementation-Title and Implementation-Version come from the
								POM by default -->
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						</manifest>
						<manifestEntries>
							<!-- Package format version - do not change -->
							<Vaadin-Package-Version>1</Vaadin-Package-Version>

							<!-- Add-on specific fields to update -->
							<AdVaaLicen>cval</AdVaaLicen>
							<AdVaaName>vaadin-charts</AdVaaName>
							<AdVaaPkg>com.vaadin.addon.charts.client</AdVaaPkg>

							<!-- Implementation-Title and Implementation-Version come from the
								POM by default -->
							<Implementation-Title>Vaadin Charts</Implementation-Title>

							<!-- Comma-separated list of widgetsets in the package -->
							<Vaadin-Widgetsets>com.vaadin.addon.charts.Widgetset,com.vaadin.addon.timeline.gwt.TimelineWidgetSet</Vaadin-Widgetsets>
						</manifestEntries>
					</archive>
					<excludes>
						<!-- Remove resources included due to gwt compilation -->
						<exclude>**/demoandtestapp/*</exclude>
					</excludes>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<version>2.5.3</version>
				<executions>
					<execution>
						<id>bundle-manifest</id>
						<phase>process-classes</phase>
						<goals>
							<goal>manifest</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<excludeDependencies>*;scope=provided|runtime</excludeDependencies>
					<!-- <excludeDependencies>vaadin-client,vaadin-server</excludeDependencies> -->
					<instructions>
						<Export-Package>com.vaadin.addon.charts,com.vaadin.addon.charts.events,com.vaadin.addon.charts.model,com.vaadin.addon.charts.model.style,com.vaadin.addon.charts.themes,com.vaadin.addon.charts.util,com.vaadin.addon.timeline</Export-Package>
						<!-- Ignore GWT dirt, not needed in osgi bundles, gwt compilation seldom
							happens in such -->
						<Import-Package>!com.google.gwt.*,
							!com.vaadin.client.*, *</Import-Package>
					</instructions>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>2.1.2</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.10.3</version>
				<configuration>
					<failOnError>false</failOnError>
				</configuration>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<includeScope>runtime</includeScope>
							<outputDirectory>target/libs</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>


			<!-- This creates a zip file of jar and sources jar. When publishing in
				the Directory this makes sources available to maven users automatically.
				We could also use this to package required dependecies for those poor developer
				souls that still dont know how to use a build system that supports transient
				dependencies... -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<configuration>
					<finalName>directorystuff</finalName>
					<appendAssemblyId>false</appendAssemblyId>
					<descriptors>
						<descriptor>assembly.xml</descriptor>
					</descriptors>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.vaadin</groupId>
				<artifactId>vaadin-maven-plugin</artifactId>
				<executions>
					<execution>
						<phase>test-compile</phase>
						<goals>
							<goal>compile</goal>
						</goals>
						<configuration>
							<skip>${skipTests}</skip>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<version>2.7</version>
				<configuration>
					<instrumentation>
						<ignores>
							<ignore>com.vaadin.addon.charts.client.*</ignore>
							<ignore>com.vaadin.addon.timeline.gwt.*</ignore>
							<ignore>com.vaadin.addon.charts.model.*.get*</ignore>
							<ignore>com.vaadin.addon.charts.model.*.is*</ignore>
							<ignoreMethod>com.vaadin.addon.charts.model.*.get*</ignoreMethod>
							<ignoreMethod>com.vaadin.addon.charts.model.*.is*</ignoreMethod>
						</ignores>
						<excludes>
							<exclude>com/vaadin/addon/charts/client/**/*.class</exclude>
							<exclude>com/vaadin/addon/timeline/gwt/**/*.class</exclude>
						</excludes>
					</instrumentation>
				</configuration>
				<executions>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.16</version>
				<configuration>
					<excludes>
						<exclude>**/*TBTest.java</exclude>
						<!-- Files here might match to naming conventions, but the are just
							vaadin apps containing your add-on components in various setups. We can ignore
							them from test. -->
						<exclude>**/demoandtestapp/**/*</exclude>
						<exclude>**/Abstract*</exclude>
					</excludes>
					<forkCount>10</forkCount>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.17</version>
				<configuration>
					<includes>
						<include>**/*TBTest.java</include>
					</includes>
					<excludes>
						<!-- Files here might match to naming conventions, but the are just
                            vaadin apps containing your add-on components in various setups. We can ignore
                            them from test. -->
						<exclude>**/demoandtestapp/**/*</exclude>
						<exclude>**/Abstract*</exclude>
					</excludes>
					<systemProperties>
						<property>
							<name>tb.hub</name>
							<value>${tb.hub}</value>
						</property>
					</systemProperties>
					<forkCount>10</forkCount>
				</configuration>
				<executions>
					<execution>
						<id>failsafe-integration-tests</id>
						<phase>integration-test</phase>
						<goals>
							<goal>integration-test</goal>
						</goals>
					</execution>
					<execution>
						<id>failsafe-verify</id>
						<phase>verify</phase>
						<goals>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>8.1.16.v20140903</version>
				<configuration>
					<connectors>
						<connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
							<port>9998</port>
							<maxIdleTime>60000</maxIdleTime>
						</connector>
					</connectors>
					<useProvidedScope>true</useProvidedScope>
					<useTestClasspath>true</useTestClasspath>
					<stopKey>STOP</stopKey>
					<stopPort>8005</stopPort>
					<webApp>
						<contextPath>/</contextPath>
						<baseResource
								implementation="org.eclipse.jetty.util.resource.ResourceCollection">
							<resourcesAsCSV>${project.build.directory}/testwebapp</resourcesAsCSV>
						</baseResource>
					</webApp>
				</configuration>
			</plugin>
		</plugins>

		<pluginManagement>
			<plugins>
				<!-- Compile widget set for integration testing -->
				<plugin>
					<groupId>com.vaadin</groupId>
					<artifactId>vaadin-maven-plugin</artifactId>
					<version>${vaadin.version.maven}</version>
					<configuration>
						<webappDirectory>${project.build.directory}/testwebapp/VAADIN/widgetsets</webappDirectory>
						<extraJvmArgs>-Xmx1g -Xms1g -XX:MaxPermSize=512m</extraJvmArgs>
						<hostedWebapp>${project.build.directory}/testwebapp</hostedWebapp>
						<noServer>true</noServer>
						<runTarget>http://localhost:9998/</runTarget>
						<draftCompile>true</draftCompile>
						<style>PRETTY</style>
						<module>com.vaadin.addon.charts.ChartsWithTimelineWidgetset</module>

						<!-- Skip in default phase, we only gwt compile for tests -->
						<!--<skip>true</skip> -->
						<!-- <attachDebugger>true</attachDebugger> -->
						<strict>true</strict>
					</configuration>

				</plugin>
				<!--This plugin's configuration is used to store Eclipse m2e settings
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-dependency-plugin
										</artifactId>
										<versionRange>
											[2.0.0,)
										</versionRange>
										<goals>
											<goal>
												copy-dependencies
											</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>com.vaadin</groupId>
										<artifactId>
											vaadin-maven-plugin
										</artifactId>
										<versionRange>
											[7.0-SNAPSHOT,)
										</versionRange>
										<goals>
											<goal>compile</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
	<distributionManagement>
		<snapshotRepository>
			<id>vaadin-snapshots</id>
			<name>Vaadin snapshot repository</name>
			<url>${snapshot.repository.url}</url>
		</snapshotRepository>
	</distributionManagement>
	<reporting>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<configuration>
					<instrumentation>
						<ignores>
							<ignore>com.vaadin.addon.charts.client.*</ignore>
							<ignore>com.vaadin.addon.timeline.gwt.*</ignore>
							<ignore>com.vaadin.addon.charts.model.*.get*</ignore>
							<ignore>com.vaadin.addon.charts.model.*.is*</ignore>
							<ignoreMethod>com.vaadin.addon.charts.model.*.get*</ignoreMethod>
							<ignoreMethod>com.vaadin.addon.charts.model.*.is*</ignoreMethod>
						</ignores>
						<excludes>
							<exclude>com/vaadin/addon/charts/client/**/*.class</exclude>
							<exclude>com/vaadin/addon/timeline/gwt/**/*.class</exclude>
						</excludes>
					</instrumentation>
				</configuration>
			</plugin>
		</plugins>
	</reporting>

	<repositories>
		<repository>
			<id>Vaadin releases</id>
			<url>https://oss.sonatype.org/content/repositories/vaadin-releases</url>
		</repository>
		<repository>
			<id>vaadin-addons</id>
			<url>https://maven.vaadin.com/vaadin-addons</url>
		</repository>
		<repository>
			<id>vaadin-snapshots</id>
			<url>${snapshot.repository.url}</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>maven2-repository.dev.java.net</id>
			<name>Java.net Maven 2 Repository</name>
			<url>http://download.java.net/maven/2</url>
			<layout>default</layout>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>

	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>vaadin-snapshots</id>
			<url>${snapshot.repository.url}</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</pluginRepository>

	</pluginRepositories>


	<dependencies>

		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-server</artifactId>
			<version>${vaadin.version.maven}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-client</artifactId>
			<version>${vaadin.version.maven}</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.5.2</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>1.4</version>
		</dependency>

		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-themes</artifactId>
			<version>${vaadin.version.maven}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-push</artifactId>
			<version>${vaadin.version.maven}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-testbench</artifactId>
			<version>4.0.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.10</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.10.19</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-webapp</artifactId>
			<version>8.1.13.v20130916</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-websocket</artifactId>
			<version>8.1.13.v20130916</version>
			<scope>test</scope>
		</dependency>

	</dependencies>
</project>
